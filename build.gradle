buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.2-rc1'
    }
}


//apply plugin: 'cobertura' //Code Coverage
//apply plugin: 'codenarc' //Code analysis and reporting
apply plugin: 'groovy' //Groovy support
apply plugin: 'idea' //IntelliJ IDEA support
apply plugin: 'maven' //Maven support
apply plugin: 'fatjar'

// Build properties
sourceCompatibility = 1.6
version = '0.1.0-SNAPSHOT'
String dropwizardVersion = '0.6.1'

repositories {
    mavenCentral()

    // Spock snapshots are available from the Sonatype OSS snapshot repository
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}


fatJar {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    manifest {
        attributes 'Main-Class': 'com.example.contact.ContactsService'
    }
}

dependencies {
    groovy "org.codehaus.groovy:groovy-all:2.0.5" //Groovy dependency

    compile "joda-time:joda-time:2.1" //Add Joda-Time library

    compile "com.yammer.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-testing:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-hibernate:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-migrations:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-auth:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-client:${dropwizardVersion}"

    compile 'com.h2database:h2:1.3.170'

    compile "com.yammer.dropwizard:dropwizard-testing:$dropwizardVersion"

    // mandatory dependencies for using Spock
    compile "org.spockframework:spock-core:1.0-groovy-2.0-SNAPSHOT"

    // optional dependencies for using Spock
    compile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    runtime "cglib:cglib-nodep:2.2.2"          // allows mocking of classes (in addition to interfaces)
    runtime "org.objenesis:objenesis:1.2"    // allows mocking of classes without default constructor (together with CGLIB)

    // needed for validation tests so logging in hibernate validator does not throw exception
    compile 'ch.qos.logback:logback-classic:1.0.7'
    compile "org.slf4j:log4j-over-slf4j:1.7.2"
}

/**
 * Task that will start up the DW service using the dev configuration.
 * This doesn't fork, so the Gradle process doesn't return until the service is killed (Ctrl+C)
 */
task run(dependsOn: 'fatJar', group: "Dropwizard", description: "Launch the dropwizard service using the dev configuration") << {
    //Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    def props = project.ext.properties.findAll { it.key.startsWith('dw') }
    javaexec {
        main = '-jar'
        args = ["build/libs/contact-dropwizard-${version}.jar", 'server', 'dev_config.yml']
        systemProperties = props
    }
}

/**
 * Add a DB migrate task that delegates to DropWizard using the dev configuration
 */
task migrate(dependsOn: 'fatJar', group: "Dropwizard", description: "Execute the dropwizard DB migrations using the dev configuration") << {
    javaexec {
        main = '-jar'
        args = ["build/libs/contact-dropwizard-${version}.jar", 'db', 'migrate', 'dev_config.yml']
    }
}

/**
 * Add a DB drop-all task that delegates to DropWizard using the dev configuration
 */
task dropAll(dependsOn: 'fatJar', group: "Dropwizard", description: "Execute the dropwizard DB drop-all command using the dev configuration") << {
    javaexec {
        main = '-jar'
        args = ["build/libs/contact-dropwizard-${version}.jar", 'db', 'drop-all', 'dev_config.yml', '--confirm-delete-everything']
    }
}